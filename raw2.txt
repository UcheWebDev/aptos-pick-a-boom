  {connected ? (
          <div className="bg-gray-800/50 rounded-lg p-4 mb-6 border border-gray-700">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Wallet className="h-5 w-5 text-amber-500 mr-2" />
                <span className="text-sm text-gray-500"> {formattedBalance} APT</span>
              </div>
              {!priceLoading && !priceError && (
                <span className="text-sm text-gray-500">(${aptosToUsd(parseFloat(formattedBalance))?.toFixed(2)})</span>
              )}
            </div>
          </div>
        ) : null}

        {/* Amount Input */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <label className="block text-sm font-medium text-gray-400">Wager Amount</label>
            <button onClick={toggleCurrency} className="text-sm text-amber-500 hover:text-amber-600 flex items-center">
              <DollarSign className="h-4 w-4 mr-1" />
              Switch to {isUsdMode ? "APT" : "USD"}
            </button>
          </div>
          <div className="relative">
            <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              {isUsdMode ? "$" : "APT"}
            </span>
            <input
              type="number"
              value={amount}
              onChange={(e) => handleAmountChange(e.target.value)}
              className={`w-full pl-12 pr-4 py-3 text-white bg-gray-800/50 border border-gray-700 rounded-lg focus:ring-2 focus:ring-amber-500 ${
                errors.amount ? "border-red-500" : ""
              }`}
              placeholder={`Total amount in ${isUsdMode ? "USD" : "APT"}`}
            />
          </div>
          {errors.amount && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <AlertCircle className="h-4 w-4 mr-1" />
              {errors.amount}
            </p>
          )}

          {/* Preset Amounts */}
          <div className="grid grid-cols-4 gap-2 mt-3">
            {presetAmounts.map((preset) => (
              <button
                key={preset}
                onClick={() => handleAmountChange(preset.toString())}
                className="px-2 py-1 text-sm bg-gray-800/50 text-gray-400 border border-gray-700 rounded hover:bg-gray-700 transition-colors"
              >
                {getDisplayAmount(preset)}
              </button>
            ))}
          </div>
        </div>

        {/* Amount Input */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <label className="block text-sm font-medium text-gray-400">Total Picks</label>
            <button
              onClick={openMatchesDialog}
              className="text-sm text-amber-500 hover:text-amber-600 flex items-center"
            >
              Choose Matches ({matchesCount})
            </button>
          </div>
          <div className="relative">
            <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">
              <Aperture className="h-4 w-4 mr-1" />
            </span>
            <input
              type="number"
              value={totalGames}
              onChange={(e) => handleTotalGamesChange(e.target.value)}
              className={`w-full pl-12 pr-4 py-3 text-white bg-gray-800/50 border border-gray-700 rounded-lg focus:ring-2 focus:ring-amber-500 ${
                errors.totalGames ? "border-red-500" : ""
              }`}
              placeholder="Total number of games"
              readOnly={true}
            />
          </div>
          {errors.totalGames && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <AlertCircle className="h-4 w-4 mr-1" />
              {errors.totalGames}
            </p>
          )}
        </div>

        {/* Multiplier Section */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <label className="text-sm font-medium text-gray-400">Flex (coming soon)</label>
          </div>

          {/* Cut Presets */}
          <div className="grid grid-cols-3 gap-3 mb-4">
            {cutPresets.map((preset, index) => (
              <button
                key={preset.label}
                onClick={() => handleCutPresetToggle(preset.multiplier)}
                disabled={true}
                className={`px-4 py-2 rounded-lg  text-sm font-medium transition-colors ${
                  selectedCutPreset === preset.multiplier
                    ? "bg-blue-600 text-white"
                    : " bg-gray-800/50 text-gray-400 border border-gray-700 rounded hover:bg-gray-700"
                }`}
              >
                {preset.label}
              </button>
            ))}
          </div>
        </div>

        {/* Summary */}
        <div className="bg-gray-900 rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center text-gray-400">
              <Calculator className="h-5 w-5 mr-2" />
              <span>Potential Win</span>
            </div>
            <span className="font-bold text-green-600">{getFormattedPotentialWinnings()}</span>
          </div>
          <div className="text-xs text-gray-400">*Final payout is 1x of wager amount</div>
        </div>

        {/* Place Bet Button */}
        <button
          onClick={handleSubmit}
          disabled={!connected}
          className={`w-full  py-4
           font-bold  transition-colors 
           ${!connected ? "bg-gray-300 rounded-lg text-gray-500 cursor-not-allowed" : "bg-gradient-to-r from-amber-500 to-pink-500 text-white py-3 rounded-lg font-bold hover:from-amber-600 hover:to-pink-600 transition-all duration-300 flex items-center justify-center space-x-2 group"}`}
        >
          Place
        </button>